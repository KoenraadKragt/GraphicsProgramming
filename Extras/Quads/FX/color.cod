//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
    float   gGlobalTime;                // Offset:   64, size:    4
    float2  gResolution;                // Offset:   68, size:    8
    float   padding;                    // Offset:   76, size:    4
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float gGlobalTime;                 // Offset:   64 Size:     4 [unused]
                //   float2 gResolution;                // Offset:   68 Size:     8 [unused]
                //   float padding;                     // Offset:   76 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float gGlobalTime;                 // Offset:   64 Size:     4
                //   float2 gResolution;                // Offset:   68 Size:     8
                //   float padding;                     // Offset:   76 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[5], immediateIndexed
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.xyzw
                dcl_temps 10
                mul r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                div r0.xy, r0.xyxx, cb0[4].yzyy
                mov r0.xy, -r0.xyxx
                add r0.xy, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                div r0.z, cb0[4].y, cb0[4].z
                mul r0.x, r0.z, r0.x
                mov r1.xyz, l(0,-2.000000,4.000000,0)
                mul r2.x, r0.x, l(1.600000)
                mov r2.y, -r0.y
                mov r2.z, l(-1.500000)
                dp3 r0.x, r2.xyzx, r2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, r2.xyzx
                mov r1.xyz, r1.xyzx
                mov r0.xyz, r0.xyzx
                mov r0.w, l(0)
                mov r1.w, l(0.020000)
                mov r1.xyz, r1.xyzx
                mov r2.x, l(0)
                mov r2.y, l(0)
                mov r3.xz, r1.xxzx
                mov r2.z, r0.w
                mov r2.w, r1.y
                mov r3.w, r2.x
                mov r4.x, r2.y
                loop 
                  ilt r4.y, r4.x, l(64)
                  breakc_z r4.y
                  mov r5.xz, r3.xxzx
                  mov r5.y, r2.w
                  dp3 r4.y, r5.xyzx, r5.xyzx
                  sqrt r4.y, r4.y
                  mov r4.y, -r4.y
                  add r4.y, r4.y, l(100.000000)
                  mov r5.xyz, r5.xyzx
                  mul r6.xyz, r5.xyzx, l(1.000000, 0.500000, 1.000000, 0.000000)
                  mov r7.xyzw, l(0,-1.000000,0,1.000000)
                  mov r6.xyz, -r6.xyzx
                  add r6.xyz, r6.xyzx, r7.xyzx
                  dp3 r4.z, r6.xyzx, r6.xyzx
                  sqrt r4.z, r4.z
                  mov r4.w, -r7.w
                  add r4.z, r4.w, r4.z
                  mov r4.z, r4.z
                  mul r6.y, cb0[4].x, l(2.000000)
                  mov r6.xz, l(0,0,0,0)
                  add r6.xyz, r5.xyzx, r6.xyzx
                  round_ni r7.xyz, r6.xyzx
                  dp3 r4.w, r7.xyzx, l(1.000000, 57.000000, 21.000000, 0.000000)
                  add r8.xyzw, r4.wwww, l(0.000000, 57.000000, 21.000000, 78.000000)
                  mov r7.xyz, -r7.xyzx
                  add r6.xyz, r6.xyzx, r7.xyzx
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  sincos null, r6.xyz, r6.xyzx
                  mul r6.xyz, r6.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
                  add r6.xyz, r6.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  sincos null, r7.xyzw, r8.xyzw
                  mul r7.xyzw, r8.xyzw, r7.xyzw
                  sincos r7.xyzw, null, r7.xyzw
                  add r9.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  sincos null, r9.xyzw, r9.xyzw
                  add r8.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  mul r8.xyzw, r8.xyzw, r9.xyzw
                  sincos r8.xyzw, null, r8.xyzw
                  mov r9.xyzw, -r7.xyzw
                  add r8.xyzw, r8.xyzw, r9.xyzw
                  mul r8.xyzw, r6.xxxx, r8.xyzw
                  add r7.xyzw, r7.xyzw, r8.xyzw
                  mov r6.xw, -r7.xxxz
                  add r6.xw, r6.xxxw, r7.yyyw
                  mul r6.xy, r6.xwxx, r6.yyyy
                  add r6.xy, r6.xyxx, r7.xzxx
                  mov r4.w, -r6.x
                  add r4.w, r4.w, r6.y
                  mul r4.w, r4.w, r6.z
                  add r4.w, r4.w, r6.x
                  mul r5.xzw, r5.xxyz, l(3.000000, 0.000000, 3.000000, 3.000000)
                  round_ni r6.xyz, r5.xzwx
                  dp3 r6.w, r6.xyzx, l(1.000000, 57.000000, 21.000000, 0.000000)
                  add r7.xyzw, r6.wwww, l(0.000000, 57.000000, 21.000000, 78.000000)
                  mov r6.xyz, -r6.xyzx
                  add r5.xzw, r5.xxzw, r6.xxyz
                  mul r5.xzw, r5.xxzw, l(3.141593, 0.000000, 3.141593, 3.141593)
                  sincos null, r5.xzw, r5.xxzw
                  mul r5.xzw, r5.xxzw, l(-0.500000, 0.000000, -0.500000, -0.500000)
                  add r5.xzw, r5.xxzw, l(0.500000, 0.000000, 0.500000, 0.500000)
                  sincos null, r6.xyzw, r7.xyzw
                  mul r6.xyzw, r7.xyzw, r6.xyzw
                  sincos r6.xyzw, null, r6.xyzw
                  add r8.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  sincos null, r8.xyzw, r8.xyzw
                  add r7.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                  mul r7.xyzw, r7.xyzw, r8.xyzw
                  sincos r7.xyzw, null, r7.xyzw
                  mov r8.xyzw, -r6.xyzw
                  add r7.xyzw, r7.xyzw, r8.xyzw
                  mul r7.xyzw, r5.xxxx, r7.xyzw
                  add r6.xyzw, r6.xyzw, r7.xyzw
                  mov r7.xy, -r6.xzxx
                  add r6.yw, r6.yyyw, r7.xxxy
                  mul r5.xz, r5.zzzz, r6.yywy
                  add r5.xz, r5.xxzx, r6.xxzx
                  mov r6.x, -r5.x
                  add r5.z, r5.z, r6.x
                  mul r5.z, r5.z, r5.w
                  add r5.x, r5.z, r5.x
                  mul r5.x, r5.x, l(0.500000)
                  add r4.w, r4.w, r5.x
                  mul r4.w, r4.w, l(0.250000)
                  mul r4.w, r5.y, r4.w
                  add r4.z, r4.w, r4.z
                  mov r4.w, -r4.z
                  max r4.z, r4.w, r4.z
                  min r4.y, r4.z, r4.y
                  add r4.y, r1.w, r4.y
                  mul r5.xyz, r0.xyzx, r4.yyyy
                  mov r3.y, r2.w
                  add r3.xyz, r5.xyzx, r3.xyzx
                  lt r4.y, r1.w, r4.y
                  if_nz r4.y
                    mov r3.xyz, r3.xyzx
                    mul r4.yzw, r3.xxyz, l(0.000000, 1.000000, 0.500000, 1.000000)
                    mov r5.xyzw, l(0,-1.000000,0,1.000000)
                    mov r4.yzw, -r4.yyzw
                    add r4.yzw, r4.yyzw, r5.xxyz
                    dp3 r4.y, r4.yzwy, r4.yzwy
                    sqrt r4.y, r4.y
                    mov r4.z, -r5.w
                    add r4.y, r4.z, r4.y
                    mov r4.y, r4.y
                    mul r5.y, cb0[4].x, l(2.000000)
                    mov r5.xz, l(0,0,0,0)
                    add r5.xyz, r3.xyzx, r5.xyzx
                    round_ni r6.xyz, r5.xyzx
                    dp3 r4.z, r6.xyzx, l(1.000000, 57.000000, 21.000000, 0.000000)
                    add r7.xyzw, r4.zzzz, l(0.000000, 57.000000, 21.000000, 78.000000)
                    mov r6.xyz, -r6.xyzx
                    add r5.xyz, r5.xyzx, r6.xyzx
                    mul r5.xyz, r5.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                    sincos null, r5.xyz, r5.xyzx
                    mul r5.xyz, r5.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
                    add r5.xyz, r5.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                    sincos null, r6.xyzw, r7.xyzw
                    mul r6.xyzw, r7.xyzw, r6.xyzw
                    sincos r6.xyzw, null, r6.xyzw
                    add r8.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                    sincos null, r8.xyzw, r8.xyzw
                    add r7.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                    mul r7.xyzw, r7.xyzw, r8.xyzw
                    sincos r7.xyzw, null, r7.xyzw
                    mov r8.xyzw, -r6.xyzw
                    add r7.xyzw, r7.xyzw, r8.xyzw
                    mul r7.xyzw, r5.xxxx, r7.xyzw
                    add r6.xyzw, r6.xyzw, r7.xyzw
                    mov r4.zw, -r6.xxxz
                    add r4.zw, r4.zzzw, r6.yyyw
                    mul r4.zw, r4.zzzw, r5.yyyy
                    add r4.zw, r4.zzzw, r6.xxxz
                    mov r5.x, -r4.z
                    add r4.w, r4.w, r5.x
                    mul r4.w, r4.w, r5.z
                    add r4.z, r4.w, r4.z
                    mul r5.xyz, r3.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
                    round_ni r6.xyz, r5.xyzx
                    dp3 r4.w, r6.xyzx, l(1.000000, 57.000000, 21.000000, 0.000000)
                    add r7.xyzw, r4.wwww, l(0.000000, 57.000000, 21.000000, 78.000000)
                    mov r6.xyz, -r6.xyzx
                    add r5.xyz, r5.xyzx, r6.xyzx
                    mul r5.xyz, r5.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                    sincos null, r5.xyz, r5.xyzx
                    mul r5.xyz, r5.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
                    add r5.xyz, r5.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                    sincos null, r6.xyzw, r7.xyzw
                    mul r6.xyzw, r7.xyzw, r6.xyzw
                    sincos r6.xyzw, null, r6.xyzw
                    add r8.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                    sincos null, r8.xyzw, r8.xyzw
                    add r7.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                    mul r7.xyzw, r7.xyzw, r8.xyzw
                    sincos r7.xyzw, null, r7.xyzw
                    mov r8.xyzw, -r6.xyzw
                    add r7.xyzw, r7.xyzw, r8.xyzw
                    mul r7.xyzw, r5.xxxx, r7.xyzw
                    add r6.xyzw, r6.xyzw, r7.xyzw
                    mov r5.xw, -r6.xxxz
                    add r5.xw, r5.xxxw, r6.yyyw
                    mul r5.xy, r5.xwxx, r5.yyyy
                    add r5.xy, r5.xyxx, r6.xzxx
                    mov r4.w, -r5.x
                    add r4.w, r4.w, r5.y
                    mul r4.w, r4.w, r5.z
                    add r4.w, r4.w, r5.x
                    mul r4.w, r4.w, l(0.500000)
                    add r4.z, r4.w, r4.z
                    mul r4.z, r4.z, l(0.250000)
                    mul r4.z, r3.y, r4.z
                    add r4.y, r4.z, r4.y
                    lt r4.y, r4.y, l(0.000000)
                    if_nz r4.y
                      mov r3.w, l(-1)
                    endif 
                    if_nz r3.w
                      itof r4.y, r4.x
                      div r2.z, r4.y, l(64.000000)
                    endif 
                  endif 
                  iadd r4.x, r4.x, l(1)
                  mov r2.w, r3.y
                endloop 
                mov r2.w, r2.w
                mov r2.z, r2.z
                mov r2.zw, r2.zzzw
                mov r2.z, r2.z
                mul r0.x, r2.w, l(0.020000)
                add r0.x, r0.x, l(0.400000)
                mov r1.xyzw, l(-1.000000,-0.500000,-0.100000,-1.000000)
                add r1.xyzw, r1.xyzw, l(0.100000, 0.500000, 1.000000, 1.000000)
                mul r0.xyzw, r0.xxxx, r1.xyzw
                add r0.xyzw, r0.xyzw, l(1.000000, 0.500000, 0.100000, 1.000000)
                itof r1.xyzw, l(0, 0, 0, 0)
                mul r2.x, r2.z, l(2.000000)
                mov r2.y, l(1.000000)
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, r2.y
                mov r3.xyzw, -r1.xyzw
                add r0.xyzw, r0.xyzw, r3.xyzw
                mul r0.xyzw, r0.xyzw, r2.xxxx
                add r0.xyzw, r0.xyzw, r1.xyzw
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 231 instruction slots used
                            
            };
        }

    }

}

