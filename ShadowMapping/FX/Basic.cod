//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
    float4x4 gWorldInvTranspose;        // Offset:  128, size:   64
    Material gMaterial;                 // Offset:  192, size:   64
}

cbuffer cvPerFrame
{
    float4x4 gShadowTransform;          // Offset:    0, size:   64
    float3  gEyePosW;                   // Offset:   64, size:   12
    DirectionalLight gDirLights[3];     // Offset:   80, size:  192
}

//
// 2 local object(s)
//
Texture2D gShadowMap;
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Light1Tech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cvPerFrame
                // {
                //
                //   float4x4 gShadowTransform;         // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   80
                //       float4 Diffuse;                // Offset:   96
                //       float4 Specular;               // Offset:  112
                //       float3 Direction;              // Offset:  128
                //       float pad;                     // Offset:  140
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   192 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cvPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xyzw        3     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   o3.x <- <VS return value>.ShadowPosH.x; o3.y <- <VS return value>.ShadowPosH.y; o3.z <- <VS return value>.ShadowPosH.z; o3.w <- <VS return value>.ShadowPosH.w; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 54 "S:\Projects\LunaW8\ShadowMapping\FX\Basic.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosW.z
                dp3 r2.x, v1.xyzx, cb0[8].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb0[9].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb0[10].xyzx  // r2.z <- vout.NormalW.z
                
                #line 58
                dp4 r3.x, r0.xyzw, cb0[4].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb0[5].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb0[6].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb0[7].xyzw  // r3.w <- vout.PosH.w
                
                #line 61
                dp4 r4.x, r0.xyzw, cb1[0].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb1[1].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb1[2].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb1[3].xyzw  // r4.w <- vout.ShadowPosH.w
                mov o0.xyzw, r3.xyzw
                mov o3.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //
                // }
                //
                // cbuffer cvPerFrame
                // {
                //
                //   float4x4 gShadowTransform;         // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   80
                //       float4 Diffuse;                // Offset:   96
                //       float4 Specular;               // Offset:  112
                //       float3 Direction;              // Offset:  128
                //       float pad;                     // Offset:  140
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   192
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samShadow                       sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cvPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xyzw        3     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[9], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 14
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.ShadowPosH.x; v3.y <- pin.ShadowPosH.y; v3.z <- pin.ShadowPosH.z; v3.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 206 "S:\Projects\LunaW8\ShadowMapping\FX\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 70 "S:\Projects\LunaW8\ShadowMapping\FX\Basic.fx"
                dp3 r1.x, v2.xyzx, v2.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v2.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 73
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb1[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 76
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 79
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 82
                mov r3.xyzw, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z; r3.w <- ambient.w
                mov r4.xyzw, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z; r4.w <- diffuse.w
                mov r5.xyzw, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z; r5.w <- spec.w
                
                #line 88
                nop 
                nop 
                nop 
                mov r6.xyzw, v3.xyzw
                
                #line 213 "S:\Projects\LunaW8\ShadowMapping\FX\LightHelper.fx"
                div r6.xyz, r6.zxyz, r6.wwww  // r6.x <- shadowPosH.z; r6.y <- shadowPosH.x; r6.z <- shadowPosH.y
                
                #line 216
                mov r6.x, r6.x  // r6.x <- depth
                
                #line 219
                mov r0.x, r0.x  // r0.x <- dx
                mov r1.w, l(0)  // r1.w <- percentLit
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 232
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r6.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r6.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r6.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r6.x
                add r0.x, r0.y, r0.x
                
                #line 236
                div r0.x, r0.x, l(9.000000)
                
                #line 95 "S:\Projects\LunaW8\ShadowMapping\FX\Basic.fx"
                nop 
                mov r6.xyzw, cb0[12].xyzw
                mov r7.xyzw, cb0[13].xyzw
                mov r8.xyzw, cb0[14].xyzw
                mov r9.xyzw, cb1[5].xyzw
                mov r10.xyzw, cb1[6].xyzw
                mov r11.xyzw, cb1[7].xyzw
                mov r0.yzw, cb1[8].xxyz
                mov r1.xyz, r1.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 66 "S:\Projects\LunaW8\ShadowMapping\FX\LightHelper.fx"
                mov r12.xyzw, l(0,0,0,0)  // r12.x <- diffuse.x; r12.y <- diffuse.y; r12.z <- diffuse.z; r12.w <- diffuse.w
                mov r13.xyzw, l(0,0,0,0)  // r13.x <- spec.x; r13.y <- spec.y; r13.z <- spec.z; r13.w <- spec.w
                
                #line 70
                mov r0.yzw, -r0.yyzw  // r0.y <- lightVec.x; r0.z <- lightVec.y; r0.w <- lightVec.z
                
                #line 73
                mul r6.xyzw, r6.xyzw, r9.xyzw  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z; r6.w <- ambient.w
                
                #line 78
                dp3 r1.w, r0.yzwy, r1.xyzx  // r1.w <- diffuseFactor
                
                #line 82
                lt r2.w, l(0.000000), r1.w
                mov r0.yzw, -r0.yyzw
                dp3 r9.x, r0.yzwy, r1.xyzx
                add r9.x, r9.x, r9.x
                mov r9.x, -r9.x
                mul r1.xyz, r1.xyzx, r9.xxxx
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- v.x; r0.z <- v.y; r0.w <- v.z
                dp3 r0.y, r0.yzwy, r2.xyzx
                max r0.y, r0.y, l(0.000000)
                log r0.y, r0.y
                mul r0.y, r0.y, r8.w
                exp r0.y, r0.y  // r0.y <- specFactor
                mul r1.xyzw, r7.xyzw, r1.wwww
                mul r1.xyzw, r10.xyzw, r1.xyzw  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z; r1.w <- diffuse.w
                mul r7.xyzw, r8.xyzw, r0.yyyy
                mul r7.xyzw, r11.xyzw, r7.xyzw  // r7.x <- spec.x; r7.y <- spec.y; r7.z <- spec.z; r7.w <- spec.w
                movc r1.xyzw, r2.wwww, r1.xyzw, r12.xyzw
                movc r2.xyzw, r2.wwww, r7.xyzw, r13.xyzw  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z; r2.w <- spec.w
                
                #line 95 "S:\Projects\LunaW8\ShadowMapping\FX\Basic.fx"
                mov r6.xyzw, r6.xyzw  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z; r6.w <- A.w
                mov r1.xyzw, r1.xyzw  // r1.x <- D.x; r1.y <- D.y; r1.z <- D.z; r1.w <- D.w
                mov r2.xyzw, r2.xyzw  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z; r2.w <- S.w
                
                #line 98
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r1.xyzw, r0.xxxx, r1.xyzw
                add r1.xyzw, r1.xyzw, r4.xyzw  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z; r1.w <- diffuse.w
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r5.xyzw  // r0.x <- spec.x; r0.y <- spec.y; r0.z <- spec.z; r0.w <- spec.w
                
                #line 103
                add r1.xyzw, r1.xyzw, r3.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z; r0.w <- litColor.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 114 instruction slots used
                            
            };
        }

    }

}

